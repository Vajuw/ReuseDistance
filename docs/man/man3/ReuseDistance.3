.TH "ReuseDistance" 3 "23 Sep 2012" "Version 0.01" "ReuseDistance" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ReuseDistance \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ReuseDistance.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBReuseDistance\fP (uint64_t w)"
.br
.ti -1c
.RI "\fBReuseDistance\fP (\fBReuseDistance\fP &h)"
.br
.ti -1c
.RI "\fB~ReuseDistance\fP ()"
.br
.ti -1c
.RI "void \fBPrint\fP ()"
.br
.ti -1c
.RI "void \fBPrint\fP (std::ostream &f)"
.br
.ti -1c
.RI "void \fBProcess\fP (\fBReuseEntry\fP &addr)"
.br
.ti -1c
.RI "void \fBProcess\fP (\fBReuseEntry\fP *addrs, uint64_t count)"
.br
.ti -1c
.RI "void \fBProcess\fP (std::vector< \fBReuseEntry\fP > rs)"
.br
.ti -1c
.RI "void \fBProcess\fP (std::vector< \fBReuseEntry\fP * > addrs)"
.br
.ti -1c
.RI "uint64_t \fBGetDistance\fP (\fBReuseEntry\fP &addr)"
.br
.ti -1c
.RI "\fBReuseStats\fP * \fBGetStats\fP (uint64_t id)"
.br
.ti -1c
.RI "uint64_t \fBGetWindowSize\fP ()"
.br
.ti -1c
.RI "void \fBIncrementSequence\fP (uint64_t count)"
.br
.ti -1c
.RI "void \fBGetIndices\fP (std::vector< uint64_t > &ids)"
.br
.ti -1c
.RI "void \fBGetActiveAddresses\fP (std::vector< uint64_t > &addrs)"
.br
.ti -1c
.RI "uint64_t \fBGetSequenceValue\fP (uint64_t addr)"
.br
.ti -1c
.RI "uint64_t \fBGetCurrentSequence\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 151 of file ReuseDistance.hpp.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ReuseDistance::ReuseDistance (uint64_t w)"Contructs a \fBReuseDistance\fP object.
.PP
\fBParameters:\fP
.RS 4
\fIw\fP The maximum size of the window of addresses that will be examined. Use 0 for no window, but be aware that this will use a potetially unlimited amount of memory that will be proportional to the number of unique addresses processed by this object. 
.RE
.PP

.PP
Definition at line 5 of file ReuseDistance.cpp.
.SS "ReuseDistance::ReuseDistance (\fBReuseDistance\fP & h)"Contructs a \fBReuseDistance\fP object. Copy constructor. Performs a deep copy.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP A reference to another \fBReuseDistance\fP object. All state from this parameter is copied to the new \fBReuseDistance\fP object, including window size, current addresses in that window and all tracked statistics. 
.RE
.PP

.PP
Definition at line 11 of file ReuseDistance.cpp.
.SS "ReuseDistance::~ReuseDistance ()"Destroys a \fBReuseDistance\fP object. 
.PP
Definition at line 39 of file ReuseDistance.cpp.
.SH "Member Function Documentation"
.PP 
.SS "void ReuseDistance::GetActiveAddresses (std::vector< uint64_t > & addrs)"Get a std::vector containing all of the addresses currently in this \fBReuseDistance\fP object's active window.
.PP
\fBParameters:\fP
.RS 4
\fIaddrs\fP A std::vector which will contain the addresses. It is an error to pass this vector non-empty (that is addrs.size() == 0 is enforced).
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Definition at line 54 of file ReuseDistance.cpp.
.SS "uint64_t ReuseDistance::GetCurrentSequence ()\fC [inline]\fP"Get this \fBReuseDistance\fP object's current sequence.
.PP
\fBReturns:\fP
.RS 4
This \fBReuseDistance\fP object's current sequence. 
.RE
.PP

.PP
Definition at line 329 of file ReuseDistance.hpp.
.SS "uint64_t ReuseDistance::GetDistance (\fBReuseEntry\fP & addr)"Get a reuse distance for a memory address without tracking statistics for it.
.PP
\fBParameters:\fP
.RS 4
\fIaddr\fP The memory address to analyze.
.RE
.PP
\fBReturns:\fP
.RS 4
The reuse distance for the memory address given by addr. 
.RE
.PP

.SS "void ReuseDistance::GetIndices (std::vector< uint64_t > & ids)"Get a std::vector containing all of the unique indices processed by this \fBReuseDistance\fP object.
.PP
\fBParameters:\fP
.RS 4
\fIids\fP A std::vector which will contain the ids. It is an error to pass this vector non-empty (that is addrs.size() == 0 is enforced).
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Definition at line 46 of file ReuseDistance.cpp.
.SS "uint64_t ReuseDistance::GetSequenceValue (uint64_t addr)"Get the sequence value for an address currently in this \fBReuseDistance\fP object's active window.
.PP
\fBParameters:\fP
.RS 4
\fIaddr\fP An address. Addresses not in this object's active window will generate a return value of 0.
.RE
.PP
\fBReturns:\fP
.RS 4
The sequence value for addr, or 0 if addr is not in this object's active window. 
.RE
.PP

.PP
Definition at line 62 of file ReuseDistance.cpp.
.SS "\fBReuseStats\fP * ReuseDistance::GetStats (uint64_t id)\fC [inline]\fP"Get the \fBReuseStats\fP object associated with some unique id.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The unique id.
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBReuseStats\fP object associated with parameter id. 
.RE
.PP

.PP
Definition at line 152 of file ReuseDistance.cpp.
.SS "uint64_t ReuseDistance::GetWindowSize ()\fC [inline]\fP"Get the size of the window for this \fBReuseDistance\fP object.
.PP
\fBReturns:\fP
.RS 4
The size of the window for this \fBReuseDistance\fP object. 
.RE
.PP

.PP
Definition at line 277 of file ReuseDistance.hpp.
.SS "void ReuseDistance::IncrementSequence (uint64_t count)\fC [inline]\fP"Increment the internal sequence count for this \fBReuseDistance\fP object. This has the effect of fast forwarding in the memory address stream. Possibly useful if you are using sampling on your memory address stream.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP The amount of the increment.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Definition at line 288 of file ReuseDistance.hpp.
.SS "void ReuseDistance::Print (std::ostream & f)"Print statistics for this \fBReuseDistance\fP to an output stream. See \fBReuseStats::Print\fP for information about output format.
.PP
\fBParameters:\fP
.RS 4
\fIf\fP The output stream to print results to.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.SS "void ReuseDistance::Print ()"Print statistics for this \fBReuseDistance\fP to std::cout. See \fBReuseStats::Print\fP for information about output format.
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Definition at line 73 of file ReuseDistance.cpp.
.SS "void ReuseDistance::Process (std::vector< \fBReuseEntry\fP * > addrs)"Process multiple memory addresses.
.PP
\fBParameters:\fP
.RS 4
\fIaddrs\fP A std::vector of memory addresses to process.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.SS "void ReuseDistance::Process (std::vector< \fBReuseEntry\fP > rs)"Process multiple memory addresses.
.PP
\fBParameters:\fP
.RS 4
\fIaddrs\fP A std::vector of memory addresses to process.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.SS "void ReuseDistance::Process (\fBReuseEntry\fP * addrs, uint64_t count)"Process multiple memory addresses.
.PP
\fBParameters:\fP
.RS 4
\fIaddrs\fP An array of structures describing memory addresses to process. 
.br
\fIcount\fP The number of elements in addrs.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Definition at line 111 of file ReuseDistance.cpp.
.SS "void ReuseDistance::Process (\fBReuseEntry\fP & addr)\fC [inline]\fP"Process a single memory address.
.PP
\fBParameters:\fP
.RS 4
\fIaddr\fP The structure describing the memory address to process.
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP

.PP
Definition at line 131 of file ReuseDistance.cpp.

.SH "Author"
.PP 
Generated automatically by Doxygen for ReuseDistance from the source code.
