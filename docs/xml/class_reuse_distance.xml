<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="class_reuse_distance" kind="class" prot="public">
    <compoundname>ReuseDistance</compoundname>
    <includes refid="_reuse_distance_8hpp" local="no">ReuseDistance.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_reuse_distance_1a7856cea42eecd61bdebe3e83259dfc37" prot="private" static="no" mutable="no">
        <type>reuse_map_type&lt; uint64_t, uint64_t &gt;</type>
        <definition>reuse_map_type&lt;uint64_t, uint64_t&gt; ReuseDistance::window</definition>
        <argsstring></argsstring>
        <name>window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="156" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_reuse_distance_1a37e4f6796798fe8839e94c956b4354ee" prot="private" static="no" mutable="no">
        <type>reuse_map_type&lt; uint64_t, <ref refid="class_reuse_stats" kindref="compound">ReuseStats</ref> * &gt;</type>
        <definition>reuse_map_type&lt;uint64_t, ReuseStats*&gt; ReuseDistance::stats</definition>
        <argsstring></argsstring>
        <name>stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="160" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_reuse_distance_1a5d38c22d7841765630b828eed50ac345" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::sequence</definition>
        <argsstring></argsstring>
        <name>sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="163" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_reuse_distance_1a58db7a941d00660021f2f80bfb7e7e77" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::lastcleanup</definition>
        <argsstring></argsstring>
        <name>lastcleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="166" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_reuse_distance_1a7f82268f8c6ff252b2269e15ba39e6cb" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::windowsize</definition>
        <argsstring></argsstring>
        <name>windowsize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="168" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_reuse_distance_1a71dec5127968b53230186a829a5c10f8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Clean</definition>
        <argsstring>()</argsstring>
        <name>Clean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="170" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="86" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1ae4189c346cac6e7a903651f870837b5e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::GenerateScale</definition>
        <argsstring>(std::vector&lt; uint64_t &gt; &amp;s, uint64_t max)</argsstring>
        <name>GenerateScale</name>
        <param>
          <type>std::vector&lt; uint64_t &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="171"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_reuse_distance_1ab68a2d9df5c28571c3f8820c5344b2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ReuseDistance::ReuseDistance</definition>
        <argsstring>(uint64_t w)</argsstring>
        <name>ReuseDistance</name>
        <param>
          <type>uint64_t</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contructs a <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the window of addresses that will be examined. Use 0 for no window, but be aware that this will use a potetially unlimited amount of memory that will be proportional to the number of unique addresses processed by this object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="183" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="5" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1afff6c1153a623c687e1014df799c286d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ReuseDistance::ReuseDistance</definition>
        <argsstring>(ReuseDistance &amp;h)</argsstring>
        <name>ReuseDistance</name>
        <param>
          <type><ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contructs a <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object. Copy constructor. Performs a deep copy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to another <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object. All state from this parameter is copied to the new <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object, including window size, current addresses in that window and all tracked statistics. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="192" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="11" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a2846a6f2c045759657b754838045900d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ReuseDistance::~ReuseDistance</definition>
        <argsstring>()</argsstring>
        <name>~ReuseDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="197" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a0cbab308f0c9262e570b994beac0544a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Print</definition>
        <argsstring>()</argsstring>
        <name>Print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print statistics for this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> to std::cout. See <ref refid="class_reuse_stats_1a9edd9703b7de1998042cd5f72056d68a" kindref="member">ReuseStats::Print</ref> for information about output format.</para><para><simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="205" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1ac798c03bb891a51a6648df4b49e25212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Print</definition>
        <argsstring>(std::ostream &amp;f)</argsstring>
        <name>Print</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print statistics for this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> to an output stream. See <ref refid="class_reuse_stats_1a9edd9703b7de1998042cd5f72056d68a" kindref="member">ReuseStats::Print</ref> for information about output format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream to print results to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="215"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a4ff6b77022ce62e0fdefa5cc297b932a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Process</definition>
        <argsstring>(ReuseEntry &amp;addr)</argsstring>
        <name>Process</name>
        <param>
          <type><ref refid="struct_reuse_entry" kindref="compound">ReuseEntry</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process a single memory address.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure describing the memory address to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="224" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="131" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1aed9cbdd99de67972a37de4624614de9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Process</definition>
        <argsstring>(ReuseEntry *addrs, uint64_t count)</argsstring>
        <name>Process</name>
        <param>
          <type><ref refid="struct_reuse_entry" kindref="compound">ReuseEntry</ref> *</type>
          <declname>addrs</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process multiple memory addresses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of structures describing memory addresses to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in addrs.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="234" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a372960c10d5fb6552c8dfcfd77da38ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Process</definition>
        <argsstring>(std::vector&lt; ReuseEntry &gt; rs)</argsstring>
        <name>Process</name>
        <param>
          <type>std::vector&lt; <ref refid="struct_reuse_entry" kindref="compound">ReuseEntry</ref> &gt;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process multiple memory addresses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::vector of memory addresses to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="243"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a88052f5ae1e69bab8fe1f9b7b87c1037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::Process</definition>
        <argsstring>(std::vector&lt; ReuseEntry * &gt; addrs)</argsstring>
        <name>Process</name>
        <param>
          <type>std::vector&lt; <ref refid="struct_reuse_entry" kindref="compound">ReuseEntry</ref> * &gt;</type>
          <declname>addrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process multiple memory addresses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::vector of memory addresses to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="252"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1ac70a23e9dc4b242f11d76e257e894bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::GetDistance</definition>
        <argsstring>(ReuseEntry &amp;addr)</argsstring>
        <name>GetDistance</name>
        <param>
          <type><ref refid="struct_reuse_entry" kindref="compound">ReuseEntry</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reuse distance for a memory address without tracking statistics for it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory address to analyze.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The reuse distance for the memory address given by addr. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="261"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a771580c25dc5140969919e959e2ebdd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_reuse_stats" kindref="compound">ReuseStats</ref> *</type>
        <definition>ReuseStats * ReuseDistance::GetStats</definition>
        <argsstring>(uint64_t id)</argsstring>
        <name>GetStats</name>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="class_reuse_stats" kindref="compound">ReuseStats</ref> object associated with some unique id.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="class_reuse_stats" kindref="compound">ReuseStats</ref> object associated with parameter id. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="270" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="152" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a174706aa3697f068cc4d1534948d7786" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::GetWindowSize</definition>
        <argsstring>()</argsstring>
        <name>GetWindowSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of the window for this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object.</para><para><simplesect kind="return"><para>The size of the window for this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="277" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a0c6e2709575d716c1ac659a266164163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::IncrementSequence</definition>
        <argsstring>(uint64_t count)</argsstring>
        <name>IncrementSequence</name>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increment the internal sequence count for this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object. This has the effect of fast forwarding in the memory address stream. Possibly useful if you are using sampling on your memory address stream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of the increment.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="288" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a99fb4b3aae663676515ad354691b7cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::GetIndices</definition>
        <argsstring>(std::vector&lt; uint64_t &gt; &amp;ids)</argsstring>
        <name>GetIndices</name>
        <param>
          <type>std::vector&lt; uint64_t &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a std::vector containing all of the unique indices processed by this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::vector which will contain the ids. It is an error to pass this vector non-empty (that is addrs.size() == 0 is enforced).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="299" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="46" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1acc4885040a8a518fc10b5aa4da7d777a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReuseDistance::GetActiveAddresses</definition>
        <argsstring>(std::vector&lt; uint64_t &gt; &amp;addrs)</argsstring>
        <name>GetActiveAddresses</name>
        <param>
          <type>std::vector&lt; uint64_t &gt; &amp;</type>
          <declname>addrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a std::vector containing all of the addresses currently in this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object&apos;s active window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::vector which will contain the addresses. It is an error to pass this vector non-empty (that is addrs.size() == 0 is enforced).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="310" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1ac849305d7ca15a5099956d0a89c929a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::GetSequenceValue</definition>
        <argsstring>(uint64_t addr)</argsstring>
        <name>GetSequenceValue</name>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sequence value for an address currently in this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object&apos;s active window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>An address. Addresses not in this object&apos;s active window will generate a return value of 0.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sequence value for addr, or 0 if addr is not in this object&apos;s active window. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="321" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.cpp" bodystart="62" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_reuse_distance_1a5e88535f0b223c0e6d6ab1f4a1aa29ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ReuseDistance::GetCurrentSequence</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentSequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get this <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object&apos;s current sequence.</para><para><simplesect kind="return"><para>This <ref refid="class_reuse_distance" kindref="compound">ReuseDistance</ref> object&apos;s current sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="329" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="329" bodyend="329"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" line="151" bodyfile="/home/michaell/software/ReuseDistance/ReuseDistance.hpp" bodystart="151" bodyend="330"/>
    <listofallmembers>
      <member refid="class_reuse_distance_1a71dec5127968b53230186a829a5c10f8" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>Clean</name></member>
      <member refid="class_reuse_distance_1ae4189c346cac6e7a903651f870837b5e" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>GenerateScale</name></member>
      <member refid="class_reuse_distance_1acc4885040a8a518fc10b5aa4da7d777a" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetActiveAddresses</name></member>
      <member refid="class_reuse_distance_1a5e88535f0b223c0e6d6ab1f4a1aa29ba" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetCurrentSequence</name></member>
      <member refid="class_reuse_distance_1ac70a23e9dc4b242f11d76e257e894bef" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetDistance</name></member>
      <member refid="class_reuse_distance_1a99fb4b3aae663676515ad354691b7cc6" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetIndices</name></member>
      <member refid="class_reuse_distance_1ac849305d7ca15a5099956d0a89c929a7" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetSequenceValue</name></member>
      <member refid="class_reuse_distance_1a771580c25dc5140969919e959e2ebdd1" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetStats</name></member>
      <member refid="class_reuse_distance_1a174706aa3697f068cc4d1534948d7786" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>GetWindowSize</name></member>
      <member refid="class_reuse_distance_1a0c6e2709575d716c1ac659a266164163" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>IncrementSequence</name></member>
      <member refid="class_reuse_distance_1a58db7a941d00660021f2f80bfb7e7e77" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>lastcleanup</name></member>
      <member refid="class_reuse_distance_1a0cbab308f0c9262e570b994beac0544a" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>Print</name></member>
      <member refid="class_reuse_distance_1ac798c03bb891a51a6648df4b49e25212" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>Print</name></member>
      <member refid="class_reuse_distance_1a4ff6b77022ce62e0fdefa5cc297b932a" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>Process</name></member>
      <member refid="class_reuse_distance_1aed9cbdd99de67972a37de4624614de9d" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>Process</name></member>
      <member refid="class_reuse_distance_1a372960c10d5fb6552c8dfcfd77da38ba" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>Process</name></member>
      <member refid="class_reuse_distance_1a88052f5ae1e69bab8fe1f9b7b87c1037" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>Process</name></member>
      <member refid="class_reuse_distance_1ab68a2d9df5c28571c3f8820c5344b2c1" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>ReuseDistance</name></member>
      <member refid="class_reuse_distance_1afff6c1153a623c687e1014df799c286d" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>ReuseDistance</name></member>
      <member refid="class_reuse_distance_1a5d38c22d7841765630b828eed50ac345" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>sequence</name></member>
      <member refid="class_reuse_distance_1a37e4f6796798fe8839e94c956b4354ee" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>stats</name></member>
      <member refid="class_reuse_distance_1a7856cea42eecd61bdebe3e83259dfc37" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>window</name></member>
      <member refid="class_reuse_distance_1a7f82268f8c6ff252b2269e15ba39e6cb" prot="private" virt="non-virtual"><scope>ReuseDistance</scope><name>windowsize</name></member>
      <member refid="class_reuse_distance_1a2846a6f2c045759657b754838045900d" prot="public" virt="non-virtual"><scope>ReuseDistance</scope><name>~ReuseDistance</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
